# Compute the difference in sample means, store the
# value in the vector from step 1
permuted_mean_differences[i]<-mean_A-mean_B
}
# Step 5:
# Return the permuted mean differences vector
return(permuted_mean_differences)
}
perm_cor <- function(perms = 1000, x, y)
{
## Variables ##
# perms: The number of permutations
# x: Vector of Variable 1 - for computing correlation
# y: Vector of Variable 2 - for computing correlation
###############
# Step 1:
# Create vector of zeroes of length "perms" to store
# permuted mean differnces
correlations<-rep(0,perms)
# Loop throught number of permutations
for (i in c(1:perms))
{
# Step 2:
# Randomly mix up the values in the vector "y"
temp<-sample(y)
# Step 3:
# Compute the correlation between x and the randomly mixed
# up y-vector. Store this value in the vector from step 1.
correlations[i]<-cor(x,temp)
}
# Step 4:
# Return new updated vector, created in step 1
return(correlations)
}
gapminder
levels(gapminder$continent)
unique(gapminder$year)
#gap_data<-read_delim(file="gapminder.csv",delim=",",col_types = cols(
#  country=col_factor(),
#  continent=col_factor(),
#  year=col_integer(),
#  lifeExp=col_double(),
#  pop=col_integer(),
#  gdpPercap=col_double()
#
#))
gap_data<-gapminder
set.seed(25)
gap_data2<-gap_data%>%group_by(continent,country)%>%summarize(correlation=cor(gdpPercap,lifeExp))%>%filter(continent=="Asia"|continent=="Europe")
gap_dataAsia<-gap_data2%>%filter(continent=="Asia")
gap_dataEurope<-gap_data2%>%filter(continent=="Europe")
cor_diff<-mean(gap_dataEurope$correlation)-mean(gap_dataAsia$correlation)
permutation_diff<-perm_mean(perms=10000,all_values=gap_data2$correlation,n_A=length(gap_dataEurope$correlation))
permutaion_diff<-tibble("correlation"=permutation_diff)
ggplot(data=permutaion_diff)+geom_histogram(aes(x=correlation,fill=(correlation<quantile(correlation,probs = c(.025))[[1]]|correlation>quantile(correlation,probs = c(.975))[[1]])))+
geom_vline(xintercept=cor_diff,color="red")+
labs(title="Permutated Means Histogram",fill="Tails",x="Mean Difference")
percentile=sum(permutaion_diff<cor_diff)/nrow(permutaion_diff)*100
stats<-tribble(
~Statistic,              ~Value,
#--|--|----
"Mean", mean(permutaion_diff$correlation),
"Median", median(permutaion_diff$correlation),
"Max", max(permutaion_diff$correlation),
"Min", min(permutaion_diff$correlation),
"2.5 Percentile", quantile(permutaion_diff$correlation,probs=c(.025))[[1]],
"97.5 Percentile", quantile(permutaion_diff$correlation,probs=c(.975))[[1]],
"Calculated Mean Difference",cor_diff,
"Percentile",percentile
)
stats
i="Africa"
gap_data3<-gap_data%>%filter(continent==i)
thing1<-gap_data3$pop
thing2<-gap_data3$gdpPercap
correlations<-perm_cor(perms=10000,thing1,thing2)
correlations<-tibble("correlation"=correlations)
calculated_cor<-cor(thing1,thing2)
ggplot(data=correlations,aes(x=correlation,fill=(correlation<quantile(correlation,probs = c(.025),na.rm=T)[[1]]|correlation>quantile(correlation,probs = c(.975),na.rm=T)[[1]])))+geom_histogram()+
geom_vline(xintercept=calculated_cor,color="red")+
labs(fill="tails")
percentile<-length(correlations$correlation[correlations$correlation<calculated_cor])/nrow(correlations)
stats<-tribble(
~Statistic,              ~Value,
#--|--|----
"Mean", mean(correlations$correlation,na.rm=T),
"Median", median(correlations$correlation,na.rm=T),
"Max", max(correlations$correlation,na.rm=T),
"Min", min(correlations$correlation,na.rm=T),
"2.5 Percentile", quantile(correlations$correlation,probs=c(.025))[[1]],
"97.5 Percentile", quantile(correlations$correlation,probs=c(.975))[[1]],
"Calculated Correlation",calculated_cor,
"Percentile",percentile
)
stats
perm_cor <- function(perms = 1000, x, y)
{
## Variables ##
# perms: The number of permutations
# x: Vector of Variable 1 - for computing correlation
# y: Vector of Variable 2 - for computing correlation
###############
# Step 1:
# Create vector of zeroes of length "perms" to store
# permuted mean differnces
correlations<-rep(0,perms)
x<-x[!is.na(X)&!is.na(y)]
y<-y[!is.na(y)&!is.na(y)]
# Loop throught number of permutations
for (i in c(1:perms))
{
# Step 2:
# Randomly mix up the values in the vector "y"
temp<-sample(y)
# Step 3:
# Compute the correlation between x and the randomly mixed
# up y-vector. Store this value in the vector from step 1.
correlations[i]<-cor(x,temp)
}
# Step 4:
# Return new updated vector, created in step 1
return(correlations)
}
gapminder
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stringr)
library(lubridate)
library(gapminder)
perm_mean <- function(perms = 1000, all_values, n_A)
{
## Variables ##
# perms: The number of permutations
# all_values (num): all data values
# n_A (int): Size of group A
###############
# Step 1:
# Create vector of zeroes of length "perms" to store
# permuted mean differnces
permuted_mean_differences<-rep(0,perms)
# Loop throught number of permutations
for (i in c(1:perms))
{
# Step 2:
# Randomly separate vector "values" into disjoint
# groups of size "nA" and "nB" respectively
temp<-sample(all_values)
group_A<-temp[1:n_A]
group_B<-temp[(n_A+1):length(temp)]
# Step 3:
# Compute the sample means for the two groups from
# step 2
mean_A<-mean(group_A,na.rm=T)
mean_B<-mean(group_B,na.rm=T)
# Step 4:
# Compute the difference in sample means, store the
# value in the vector from step 1
permuted_mean_differences[i]<-mean_A-mean_B
}
# Step 5:
# Return the permuted mean differences vector
return(permuted_mean_differences)
}
perm_cor <- function(perms = 1000, x, y)
{
## Variables ##
# perms: The number of permutations
# x: Vector of Variable 1 - for computing correlation
# y: Vector of Variable 2 - for computing correlation
###############
# Step 1:
# Create vector of zeroes of length "perms" to store
# permuted mean differnces
correlations<-rep(0,perms)
x<-x[!is.na(X)&!is.na(y)]
y<-y[!is.na(y)&!is.na(y)]
# Loop throught number of permutations
for (i in c(1:perms))
{
# Step 2:
# Randomly mix up the values in the vector "y"
temp<-sample(y)
# Step 3:
# Compute the correlation between x and the randomly mixed
# up y-vector. Store this value in the vector from step 1.
correlations[i]<-cor(x,temp)
}
# Step 4:
# Return new updated vector, created in step 1
return(correlations)
}
gapminder
levels(gapminder$continent)
unique(gapminder$year)
#gap_data<-read_delim(file="gapminder.csv",delim=",",col_types = cols(
#  country=col_factor(),
#  continent=col_factor(),
#  year=col_integer(),
#  lifeExp=col_double(),
#  pop=col_integer(),
#  gdpPercap=col_double()
#
#))
gap_data<-gapminder
set.seed(25)
gap_data2<-gap_data%>%group_by(continent,country)%>%summarize(correlation=cor(gdpPercap,lifeExp))%>%filter(continent=="Asia"|continent=="Europe")
gap_dataAsia<-gap_data2%>%filter(continent=="Asia")
gap_dataEurope<-gap_data2%>%filter(continent=="Europe")
cor_diff<-mean(gap_dataEurope$correlation)-mean(gap_dataAsia$correlation)
permutation_diff<-perm_mean(perms=10000,all_values=gap_data2$correlation,n_A=length(gap_dataEurope$correlation))
permutaion_diff<-tibble("correlation"=permutation_diff)
ggplot(data=permutaion_diff)+geom_histogram(aes(x=correlation,fill=(correlation<quantile(correlation,probs = c(.025))[[1]]|correlation>quantile(correlation,probs = c(.975))[[1]])))+
geom_vline(xintercept=cor_diff,color="red")+
labs(title="Permutated Means Histogram",fill="Tails",x="Mean Difference")
percentile=sum(permutaion_diff<cor_diff)/nrow(permutaion_diff)*100
stats<-tribble(
~Statistic,              ~Value,
#--|--|----
"Mean", mean(permutaion_diff$correlation),
"Median", median(permutaion_diff$correlation),
"Max", max(permutaion_diff$correlation),
"Min", min(permutaion_diff$correlation),
"2.5 Percentile", quantile(permutaion_diff$correlation,probs=c(.025))[[1]],
"97.5 Percentile", quantile(permutaion_diff$correlation,probs=c(.975))[[1]],
"Calculated Mean Difference",cor_diff,
"Percentile",percentile
)
stats
i="Africa"
gap_data3<-gap_data%>%filter(continent==i)
thing1<-gap_data3$pop
thing2<-gap_data3$gdpPercap
correlations<-perm_cor(perms=10000,thing1,thing2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stringr)
library(lubridate)
library(gapminder)
perm_mean <- function(perms = 1000, all_values, n_A)
{
## Variables ##
# perms: The number of permutations
# all_values (num): all data values
# n_A (int): Size of group A
###############
# Step 1:
# Create vector of zeroes of length "perms" to store
# permuted mean differnces
permuted_mean_differences<-rep(0,perms)
# Loop throught number of permutations
for (i in c(1:perms))
{
# Step 2:
# Randomly separate vector "values" into disjoint
# groups of size "nA" and "nB" respectively
temp<-sample(all_values)
group_A<-temp[1:n_A]
group_B<-temp[(n_A+1):length(temp)]
# Step 3:
# Compute the sample means for the two groups from
# step 2
mean_A<-mean(group_A,na.rm=T)
mean_B<-mean(group_B,na.rm=T)
# Step 4:
# Compute the difference in sample means, store the
# value in the vector from step 1
permuted_mean_differences[i]<-mean_A-mean_B
}
# Step 5:
# Return the permuted mean differences vector
return(permuted_mean_differences)
}
perm_cor <- function(perms = 1000, x, y)
{
## Variables ##
# perms: The number of permutations
# x: Vector of Variable 1 - for computing correlation
# y: Vector of Variable 2 - for computing correlation
###############
# Step 1:
# Create vector of zeroes of length "perms" to store
# permuted mean differnces
correlations<-rep(0,perms)
# Loop throught number of permutations
for (i in c(1:perms))
{
# Step 2:
# Randomly mix up the values in the vector "y"
temp<-sample(y)
# Step 3:
# Compute the correlation between x and the randomly mixed
# up y-vector. Store this value in the vector from step 1.
correlations[i]<-cor(x,temp)
}
# Step 4:
# Return new updated vector, created in step 1
return(correlations)
}
gapminder
levels(gapminder$continent)
unique(gapminder$year)
#gap_data<-read_delim(file="gapminder.csv",delim=",",col_types = cols(
#  country=col_factor(),
#  continent=col_factor(),
#  year=col_integer(),
#  lifeExp=col_double(),
#  pop=col_integer(),
#  gdpPercap=col_double()
#
#))
gap_data<-gapminder
set.seed(25)
gap_data2<-gap_data%>%group_by(continent,country)%>%summarize(correlation=cor(gdpPercap,lifeExp))%>%filter(continent=="Asia"|continent=="Europe")
gap_dataAsia<-gap_data2%>%filter(continent=="Asia")
gap_dataEurope<-gap_data2%>%filter(continent=="Europe")
cor_diff<-mean(gap_dataEurope$correlation)-mean(gap_dataAsia$correlation)
permutation_diff<-perm_mean(perms=10000,all_values=gap_data2$correlation,n_A=length(gap_dataEurope$correlation))
permutaion_diff<-tibble("correlation"=permutation_diff)
ggplot(data=permutaion_diff)+geom_histogram(aes(x=correlation,fill=(correlation<quantile(correlation,probs = c(.025))[[1]]|correlation>quantile(correlation,probs = c(.975))[[1]])))+
geom_vline(xintercept=cor_diff,color="red")+
labs(title="Permutated Means Histogram",fill="Tails",x="Mean Difference")
percentile=sum(permutaion_diff<cor_diff)/nrow(permutaion_diff)*100
stats<-tribble(
~Statistic,              ~Value,
#--|--|----
"Mean", mean(permutaion_diff$correlation),
"Median", median(permutaion_diff$correlation),
"Max", max(permutaion_diff$correlation),
"Min", min(permutaion_diff$correlation),
"2.5 Percentile", quantile(permutaion_diff$correlation,probs=c(.025))[[1]],
"97.5 Percentile", quantile(permutaion_diff$correlation,probs=c(.975))[[1]],
"Calculated Mean Difference",cor_diff,
"Percentile",percentile
)
stats
i="Africa"
gap_data3<-gap_data%>%filter(continent==i)
thing1<-gap_data3$pop
thing2<-gap_data3$gdpPercap
correlations<-perm_cor(perms=10000,thing1,thing2)
correlations<-tibble("correlation"=correlations)
calculated_cor<-cor(thing1,thing2)
ggplot(data=correlations,aes(x=correlation,fill=(correlation<quantile(correlation,probs = c(.025),na.rm=T)[[1]]|correlation>quantile(correlation,probs = c(.975),na.rm=T)[[1]])))+geom_histogram()+
geom_vline(xintercept=calculated_cor,color="red")+
labs(fill="tails")
percentile<-length(correlations$correlation[correlations$correlation<calculated_cor])/nrow(correlations)
stats<-tribble(
~Statistic,              ~Value,
#--|--|----
"Mean", mean(correlations$correlation,na.rm=T),
"Median", median(correlations$correlation,na.rm=T),
"Max", max(correlations$correlation,na.rm=T),
"Min", min(correlations$correlation,na.rm=T),
"2.5 Percentile", quantile(correlations$correlation,probs=c(.025))[[1]],
"97.5 Percentile", quantile(correlations$correlation,probs=c(.975))[[1]],
"Calculated Correlation",calculated_cor,
"Percentile",percentile
)
stats
perm_cor <- function(perms = 1000, x, y)
{
## Variables ##
# perms: The number of permutations
# x: Vector of Variable 1 - for computing correlation
# y: Vector of Variable 2 - for computing correlation
###############
# Step 1:
# Create vector of zeroes of length "perms" to store
# permuted mean differnces
correlations<-rep(0,perms)
# Loop throught number of permutations
for (i in c(1:perms))
{
# Step 2:
# Randomly mix up the values in the vector "y"
temp<-sample(y)
# Step 3:
# Compute the correlation between x and the randomly mixed
# up y-vector. Store this value in the vector from step 1.
correlations[i]<-cor(x,temp,use="pairwise.complete.obs")
}
# Step 4:
# Return new updated vector, created in step 1
return(correlations)
}
gapminder
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stringr)
library(lubridate)
library(gapminder)
perm_mean <- function(perms = 1000, all_values, n_A)
{
## Variables ##
# perms: The number of permutations
# all_values (num): all data values
# n_A (int): Size of group A
###############
# Step 1:
# Create vector of zeroes of length "perms" to store
# permuted mean differnces
permuted_mean_differences<-rep(0,perms)
# Loop throught number of permutations
for (i in c(1:perms))
{
# Step 2:
# Randomly separate vector "values" into disjoint
# groups of size "nA" and "nB" respectively
temp<-sample(all_values)
group_A<-temp[1:n_A]
group_B<-temp[(n_A+1):length(temp)]
# Step 3:
# Compute the sample means for the two groups from
# step 2
mean_A<-mean(group_A,na.rm=T)
mean_B<-mean(group_B,na.rm=T)
# Step 4:
# Compute the difference in sample means, store the
# value in the vector from step 1
permuted_mean_differences[i]<-mean_A-mean_B
}
# Step 5:
# Return the permuted mean differences vector
return(permuted_mean_differences)
}
perm_cor <- function(perms = 1000, x, y)
{
## Variables ##
# perms: The number of permutations
# x: Vector of Variable 1 - for computing correlation
# y: Vector of Variable 2 - for computing correlation
###############
# Step 1:
# Create vector of zeroes of length "perms" to store
# permuted mean differnces
correlations<-rep(0,perms)
# Loop throught number of permutations
for (i in c(1:perms))
{
# Step 2:
# Randomly mix up the values in the vector "y"
temp<-sample(y)
# Step 3:
# Compute the correlation between x and the randomly mixed
# up y-vector. Store this value in the vector from step 1.
correlations[i]<-cor(x,temp,use="pairwise.complete.obs")
}
# Step 4:
# Return new updated vector, created in step 1
return(correlations)
}
gapminder
levels(gapminder$continent)
unique(gapminder$year)
#gap_data<-read_delim(file="gapminder.csv",delim=",",col_types = cols(
#  country=col_factor(),
#  continent=col_factor(),
#  year=col_integer(),
#  lifeExp=col_double(),
#  pop=col_integer(),
#  gdpPercap=col_double()
#
#))
gap_data<-gapminder
set.seed(25)
gap_data2<-gap_data%>%group_by(continent,country)%>%summarize(correlation=cor(gdpPercap,lifeExp))%>%filter(continent=="Asia"|continent=="Europe")
gap_dataAsia<-gap_data2%>%filter(continent=="Asia")
gap_dataEurope<-gap_data2%>%filter(continent=="Europe")
cor_diff<-mean(gap_dataEurope$correlation)-mean(gap_dataAsia$correlation)
permutation_diff<-perm_mean(perms=10000,all_values=gap_data2$correlation,n_A=length(gap_dataEurope$correlation))
permutaion_diff<-tibble("correlation"=permutation_diff)
ggplot(data=permutaion_diff)+geom_histogram(aes(x=correlation,fill=(correlation<quantile(correlation,probs = c(.025))[[1]]|correlation>quantile(correlation,probs = c(.975))[[1]])))+
geom_vline(xintercept=cor_diff,color="red")+
labs(title="Permutated Means Histogram",fill="Tails",x="Mean Difference")
percentile=sum(permutaion_diff<cor_diff)/nrow(permutaion_diff)*100
stats<-tribble(
~Statistic,              ~Value,
#--|--|----
"Mean", mean(permutaion_diff$correlation),
"Median", median(permutaion_diff$correlation),
"Max", max(permutaion_diff$correlation),
"Min", min(permutaion_diff$correlation),
"2.5 Percentile", quantile(permutaion_diff$correlation,probs=c(.025))[[1]],
"97.5 Percentile", quantile(permutaion_diff$correlation,probs=c(.975))[[1]],
"Calculated Mean Difference",cor_diff,
"Percentile",percentile
)
stats
i="Africa"
gap_data3<-gap_data%>%filter(continent==i)
thing1<-gap_data3$pop
thing2<-gap_data3$gdpPercap
correlations<-perm_cor(perms=10000,thing1,thing2)
correlations<-tibble("correlation"=correlations)
calculated_cor<-cor(thing1,thing2)
ggplot(data=correlations,aes(x=correlation,fill=(correlation<quantile(correlation,probs = c(.025),na.rm=T)[[1]]|correlation>quantile(correlation,probs = c(.975),na.rm=T)[[1]])))+geom_histogram()+
geom_vline(xintercept=calculated_cor,color="red")+
labs(fill="tails")
percentile<-length(correlations$correlation[correlations$correlation<calculated_cor])/nrow(correlations)
stats<-tribble(
~Statistic,              ~Value,
#--|--|----
"Mean", mean(correlations$correlation,na.rm=T),
"Median", median(correlations$correlation,na.rm=T),
"Max", max(correlations$correlation,na.rm=T),
"Min", min(correlations$correlation,na.rm=T),
"2.5 Percentile", quantile(correlations$correlation,probs=c(.025))[[1]],
"97.5 Percentile", quantile(correlations$correlation,probs=c(.975))[[1]],
"Calculated Correlation",calculated_cor,
"Percentile",percentile
)
stats
